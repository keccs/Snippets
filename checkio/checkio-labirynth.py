def find_route(lab, row, col, visited):
	if lab[row][col] == 1 or(row, col) in visited:
		return None

	if (row, col) == (10, 10):
		return ''

	next_steps = [('S', row+1, col), ('E', row, col+1), ('N', row-1, col), ('W', row, col-1)]
	for next_step in next_steps:
		route = find_route(lab, next_step[1], next_step[2], visited + [(row, col)])
		if route != None:
			return next_step[0] + route
	
	return None

labirynth = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    		 [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    		 [1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
		     [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
		     [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1],
		     [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1],
		     [1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1],
		     [1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1],
		     [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1],
		     [1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1],
		     [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1],
		     [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]

print find_route(labirynth, 1, 1, [])

lab2 = [
[1,1,1,1,1,1,1,1,1,1,1,1],
[1,0,1,0,0,0,1,0,0,0,0,1],
[1,0,1,0,1,0,1,0,1,1,0,1],
[1,0,1,0,1,0,1,0,1,0,0,1],
[1,0,1,0,1,0,1,0,1,0,1,1],
[1,0,1,0,1,0,1,0,1,0,0,1],
[1,0,1,0,1,0,1,0,1,1,0,1],
[1,0,1,0,1,0,1,0,1,0,0,1],
[1,0,1,0,1,0,1,0,1,0,1,1],
[1,0,1,0,1,0,1,0,1,0,0,1],
[1,0,0,0,1,0,0,0,1,1,0,1],
[1,1,1,1,1,1,1,1,1,1,1,1],
]

print find_route(lab2, 1, 1, [])